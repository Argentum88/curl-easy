{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-31822517-1","name":"cURL-PHP","tagline":"Lightweight cURL wrapper for PHP. Supports parallel and non-blocking requests.","body":"#Table of contents\r\n* [Introduction](#introduction)\r\n    * [Description](#description)\r\n\t* [Main Features](#mainfeatures)\r\n* [Installation](#installation)\r\n* [Examples](#examples)\r\n    * [Single request](#singlerequest)\r\n    * [Requests in parallel](#requestsinparallel)\r\n* [cURL\\Request](#curlrequest)\r\n    * [Request::__construct](#request__construct)\r\n    * [Request::getOptions](#requestgetoptions)\r\n    * [Request::setOptions](#requestsetoptions)\r\n    * [Request::getContent](#requestgetcontent)\r\n    * [Request::getInfo](#requestgetinfo)\r\n    * [Request::send](#requestsend)\r\n* [cURL\\RequesstQueue](#curlrequestsqueue)\r\n    * [RequestsQueue::__construct](#requestsqueue__construct)\r\n    * [RequestsQueue::getDefaultOptions](#requestsqueuegetdefaultoptions)\r\n    * [RequestsQueue::setDefaultOptions](#requestsqueuesetdefaultoptions)\r\n    * [RequestsQueue::socketPerform](#requestsqueuesocketperform)\r\n    * [RequestsQueue::socketSelect](#requestsqueuesocketselect)\r\n    * [RequestsQueue::send](#requestsqueuesend)\r\n* [cURL\\Options](#curloptions)\r\n    * [Options::set](#optionsset)\r\n    * [Options::toArray](#optionstoarray)\r\n\r\n##Introduction\r\n###Description\r\nThis is small but powerful and robust library which speeds the things up. If you are tired of using PHP cURL extension with its procedural interface, but you want also keep control about script execution - it's great choice for you!\r\n###Main features\r\n* lightweight library with moderate level interface. It's not all-in-one library.\r\n* parallel/asynchronous connections with very simple interface.\r\n* attaching/detaching requests in parallel on run time!\r\n* support for callbacks, so you can control execution process.\r\n* intelligent setters as alternative to CURLOPT_* constants.\r\n* if you know the cURL php extension, you don't have to learn things from beginning\r\n\r\n##Installation\r\nIn order to use cURL-PHP library you need to install the Â» libcurl package.\r\nIt also requires PHP 5.3 or newer.\r\n\r\nYou can provide autoloading to your classes if you don't want to include them manually.\r\n```php\r\n<?php\r\nspl_autoload_register(function ($class) {\r\n    require 'D:/lib/'.strtr($class, '\\\\', '/') . '.php';\r\n});\r\n```\r\n##Examples\r\n###Single request\r\n```php\r\n<?php\r\n// We will download info about YouTube video: http://youtu.be/_PsdGQ96ah4\r\n$request = new \\cURL\\Request('http://gdata.youtube.com/feeds/api/videos/_PsdGQ96ah4?v=2&alt=json');\r\n$request->getOptions()\r\n\t->set(CURLOPT_TIMEOUT, 5)\r\n\t->set(CURLOPT_RETURNTRANSFER, true);\r\n$json = $request->send();\r\n$feed = json_decode($json, true);\r\necho $feed['entry']['title']['$t'];\r\n```\r\nThe above example will output:\r\n`Karmah - Just be good to me`\r\n###Requests in parallel\r\n```php\r\n<?php\r\n// We will download info about 2 YouTube videos:\r\n// http://youtu.be/XmSdTa9kaiQ and\r\n// http://youtu.be/6dC-sm5SWiU\r\n\r\n// Init queue of requests\r\n$queue = new \\cURL\\RequestsQueue;\r\n// Set default options for all requests in queue\r\n$queue->getDefaultOptions()\r\n\t->set(CURLOPT_TIMEOUT, 5)\r\n\t->set(CURLOPT_RETURNTRANSFER, true);\r\n// Set function to be executed when request will be completed\r\n$queue->onRequestComplete(function($queue, $request){\r\n\t$json = $request->getContent(); // Returns content of response\r\n    $feed = json_decode($json, true);\r\n    echo $feed['entry']['title']['$t'] . '<br />';\r\n});\r\n\r\n$request = new \\cURL\\Request('http://gdata.youtube.com/feeds/api/videos/XmSdTa9kaiQ?v=2&alt=json');\r\n// Add request to queue\r\n$queue->attach($request);\r\n\r\n$request = new \\cURL\\Request('http://gdata.youtube.com/feeds/api/videos/6dC-sm5SWiU?v=2&alt=json');\r\n$queue->attach($request);\r\n\r\n// Execute queue\r\n$queue->send();\r\n```\r\nThe above example will output:\r\n```\r\nKool & The Gang - Fresh - 2004\r\nU2 - With Or Without You\r\n```\r\n###Non-blocking requests\r\n```php\r\n<?php\r\n// We will download info about 2 YouTube videos:\r\n// http://youtu.be/XmSdTa9kaiQ and\r\n// http://youtu.be/6dC-sm5SWiU\r\n\r\n// Init queue of requests\r\n$queue = new \\cURL\\RequestsQueue;\r\n// Set default options for all requests in queue\r\n$queue->getDefaultOptions()\r\n\t->set(CURLOPT_TIMEOUT, 5)\r\n\t->set(CURLOPT_RETURNTRANSFER, true);\r\n// Set function to be executed when request will be completed\r\n$queue->onRequestComplete(function($queue, $request){\r\n\t$json = $request->getContent(); // Returns content of response\r\n    $feed = json_decode($json, true);\r\n    echo '<br />' . $feed['entry']['title']['$t'] . '<br />';\r\n});\r\n\r\n$request = new \\cURL\\Request('http://gdata.youtube.com/feeds/api/videos/XmSdTa9kaiQ?v=2&alt=json');\r\n$queue->attach($request);\r\n$request = new \\cURL\\Request('http://gdata.youtube.com/feeds/api/videos/6dC-sm5SWiU?v=2&alt=json');\r\n$queue->attach($request);\r\n\r\nwhile ($queue->socketPerform()) {\r\n\techo '*'; // Do something other when requests are downloaded\r\n    $queue->socketSelect(); // Wait for activity on socket\t\r\n}\r\n```\r\nThe above example will output something like that:\r\n```\r\n*********\r\nKool & The Gang - Fresh - 2004\r\n***\r\nU2 - With Or Without You\r\n```\r\n##cURL\\Request\r\n###Request::__construct\r\n###Request::getOptions\r\n###Request::setOptions\r\n###Request::getContent\r\n###Request::getInfo\r\n###Request::send\r\n##cURL\\RequesstQueue\r\n###RequestsQueue::__construct\r\n###RequestsQueue::getDefaultOptions\r\n###RequestsQueue::getDefaultOptions\r\n###RequestsQueue::setDefaultOptions\r\n###RequestsQueue::socketPerform\r\n###RequestsQueue::socketSelect\r\n###RequestsQueue::send\r\n##cURL\\Options\r\n###Options::set\r\n###Options::toArray"}